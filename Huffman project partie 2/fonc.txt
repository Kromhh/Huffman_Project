/*Création Noeud - ok*/
Noeud* creer_Noeud(int val){
    Noeud *nv_noeud = malloc(sizeof(Noeud));

    //initialisation des champs à nv_noeud
    //nv_noeud->lettre->info = NULL; //lettre 
    nv_noeud->lettre->occ = val; // somme des occurences du fils droit et du fils gauche
    nv_noeud->gauche = NULL; // Maillon enfant gauche
    nv_noeud->droit = NULL; // Maillon enfant droit
    
    return nv_noeud;  
}

/*Affichage de l'arbre - parcours infixe*/
Noeud* affichageArbre(Noeud* a){ 
    if(a != NULL){
        printf("%d\n",a->lettre->occ);
        if(a->gauche != NULL){
          a->gauche = affichageArbre(a->gauche);
        }
        if(a->droit != NULL){
          a->droit = affichageArbre(a->droit);
        }       
    } 
  return a;  
}

/*Somme des occurences de chaque caractère permettant de créer le noeud */
int sommeOcc(Maillon* L){
  Maillon* temp, *p;
  Noeud* n;
  int somme = 0;
    
  if(L != NULL){  
    temp = L;
    p = temp->suivant;
    while (temp != NULL){
    //for (int i=1; i<2; i++){
      somme = somme + (temp->occ);
      printf("Somme_de_2_Maillons = %d\n", somme); //test pour savoir si la somme a bien été faite sur 2 maillons
      printf("Creation Noeud\n");
      n = creer_Noeud(somme);
      //n->droit = temp;
      //n->gauche = temp->suivant;
      affichageArbre(n);
      
      temp->occ = p->occ; //avancement dans la liste               
      temp = temp->suivant; 
    }              
  }
  return somme;
}

/*Création arbre*/
void creer_Arbre(Maillon* L){
  sommeOcc(L);
}